package main

import "fmt"

func main() {
	//2
	target := 100
	startFuel := 10
	stations := [][]int{{10, 60}, {20, 30}, {30, 30}, {60, 40}}

	//1
	target = 100
	startFuel = 50
	stations = [][]int{{25, 25}, {50, 50}}

	//3
	target = 100
	startFuel = 25
	stations = [][]int{{25, 25}, {50, 25}, {75, 25}}

	//-1
	//target = 100
	//startFuel = 1
	//stations = [][]int{{10, 100}}

	target = 1000
	startFuel = 36
	stations = [][]int{{7, 13}, {10, 11}, {12, 31}, {22, 14}, {32, 26}, {38, 16}, {50, 8}, {54, 13}, {75, 4}, {85, 2}, {88, 35}, {90, 9}, {96, 35}, {103, 16}, {115, 33}, {121, 6}, {123, 1}, {138, 2}, {139, 34}, {145, 30}, {149, 14}, {160, 21}, {167, 14}, {188, 7}, {196, 27}, {248, 4}, {256, 35}, {262, 16}, {264, 12}, {283, 23}, {297, 15}, {307, 25}, {311, 35}, {316, 6}, {345, 30}, {348, 2}, {354, 21}, {360, 10}, {362, 28}, {363, 29}, {367, 7}, {370, 13}, {402, 6}, {410, 32}, {447, 20}, {453, 13}, {454, 27}, {468, 1}, {470, 8}, {471, 11}, {474, 34}, {486, 13}, {490, 16}, {495, 10}, {527, 9}, {533, 14}, {553, 36}, {554, 23}, {605, 5}, {630, 17}, {635, 30}, {640, 31}, {646, 9}, {647, 12}, {659, 5}, {664, 34}, {667, 35}, {676, 6}, {690, 19}, {709, 10}, {721, 28}, {734, 2}, {742, 6}, {772, 22}, {777, 32}, {778, 36}, {794, 7}, {812, 24}, {813, 33}, {815, 14}, {816, 21}, {824, 17}, {826, 3}, {838, 14}, {840, 8}, {853, 29}, {863, 18}, {867, 1}, {881, 27}, {886, 27}, {894, 26}, {917, 3}, {953, 6}, {956, 3}, {957, 28}, {962, 33}, {967, 35}, {972, 34}, {984, 8}, {987, 12}}

	////4
	//target = 1000
	//startFuel = 10
	//stations = [][]int{{7, 217}, {10, 211}, {17, 146}, {21, 232}, {25, 310}, {48, 175}, {53, 23}, {63, 158}, {71, 292}, {96, 85}, {100, 302}, {102, 295}, {116, 110}, {122, 46}, {131, 20}, {132, 19}, {141, 13}, {163, 85}, {169, 263}, {179, 233}, {191, 169}, {215, 163}, {224, 231}, {228, 282}, {256, 115}, {259, 3}, {266, 245}, {283, 331}, {299, 21}, {310, 224}, {315, 188}, {328, 147}, {345, 74}, {350, 49}, {379, 79}, {387, 276}, {391, 92}, {405, 174}, {428, 307}, {446, 205}, {448, 226}, {452, 275}, {475, 325}, {492, 310}, {496, 94}, {499, 313}, {500, 315}, {511, 137}, {515, 180}, {519, 6}, {533, 206}, {536, 262}, {553, 326}, {561, 103}, {564, 115}, {582, 161}, {593, 236}, {599, 216}, {611, 141}, {625, 137}, {626, 231}, {628, 66}, {646, 197}, {665, 103}, {668, 8}, {691, 329}, {699, 246}, {703, 94}, {724, 277}, {729, 75}, {735, 23}, {740, 228}, {761, 73}, {770, 120}, {773, 82}, {774, 297}, {780, 184}, {791, 239}, {801, 85}, {805, 156}, {837, 157}, {844, 259}, {849, 2}, {860, 115}, {874, 311}, {877, 172}, {881, 109}, {888, 321}, {894, 302}, {899, 321}, {908, 76}, {916, 241}, {924, 301}, {933, 56}, {960, 29}, {979, 319}, {983, 325}, {988, 190}, {995, 299}, {996, 97}}

	fmt.Println(minRefuelStops(target, startFuel, stations))
}

func minRefuelStops0(target int, startFuel int, stations [][]int) int {
	n := len(stations)
	//var dp = make([][2][2]int, n+1) //i为油站index+1；j为停车加油状态0为不停，1为停；w=0为当前油量，=1为停车次数
	//dp[0][0][0] = 0
	//dp[0][0][1] = 0
	//dp[0][1][0] = startFuel
	//dp[0][1][1] = 0
	//for i := 1; i <= n; i++ {
	//	dp[i][0][0] = dp[i-1][]
	//}
	if startFuel >= target {
		return 0
	}
	var dp = make([][3]int, n+1) //i为油站index+1；j为停车加油状态0为不停，1为停,2为到达当前油站时的总共停车次数；值为当前油量
	dp[0][0] = 0
	dp[0][1] = startFuel
	dp[0][2] = -1
	for i := 0; i <= n; i++ {
		if dp[i][0] < stations[i][0] {
			//不加油到不了下一站
			if dp[i][1] < stations[i][0] {
				//加油也到不了下一站
				return -1
			} else {
				//加油能到，本站必须加油
				dp[i+1][1] = dp[i][1] - stations[i][0] + stations[i][1]
				dp[i][2]++
			}
		}
	}
	//for i := 1; i <= n; i++ {
	//	var temp int
	//	if dp[i-1][0] < stations[i-1][0] {
	//		//不加油到不了
	//		if dp[i-1][1] < stations[i-1][0] {
	//			//加油也到不了
	//			return -1
	//		}
	//		//上一站加油能到
	//		temp =
	//	}
	//	dp[i][0] = dp[i-1][]
	//}

	return 0
}

func minRefuelStops(target int, startFuel int, stations [][]int) int {
	if startFuel >= target {
		return 0
	}
	total := target
	n := len(stations)
	if n == 0 || startFuel < stations[0][0] { //没有加油站或者到达不了第一个加油站
		return -1
	}
	var ans = -1
	//贪心，跑最远的加油站加油
	var dfs func(target int, fuel int, index int, temp int)
	dfs = func(target int, fuel int, index int, temp int) {
		if ans != -1 && temp >= ans {
			return
		}
		if target <= fuel {
			if ans == -1 {
				ans = temp
			} else if ans > temp {
				ans = temp
			}
			return
		}
		already := total - target //已经走过了路程
		for i := n - 1; i >= index; i-- {
			if stations[i][0]-already <= fuel {
				dfs(total-stations[i][0], fuel-stations[i][0]+already+stations[i][1], i+1, temp+1)
			}
		}
	}

	dfs(target, startFuel, 0, 0)
	return ans
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

package main

import (
	"fmt"
	"math"
	"time"
)

func main() {
	edges := [][]int{{1, 2}, {1, 3}, {2, 3}}
	//edges = [][]int{{3, 2}, {3, 1}, {2, 1}}
	//edges = [][]int{{1, 2}, {2, 3}, {3, 4}, {4, 1}, {1, 5}}
	//edges = [][]int{{2, 1}, {3, 1}, {4, 2}, {1, 4}}
	//edges = [][]int{{4, 2}, {1, 5}, {5, 2}, {5, 3}, {2, 4}}
	//edges = [][]int{{896, 577}, {755, 784}, {400, 791}, {490, 375}, {534, 714}, {8, 575}, {461, 391}, {239, 40}, {306, 48}, {745, 62}, {62, 963}, {389, 778}, {395, 46}, {402, 36}, {236, 907}, {508, 138}, {222, 661}, {926, 32}, {792, 394}, {315, 716}, {806, 990}, {728, 25}, {521, 14}, {324, 448}, {482, 584}, {270, 230}, {937, 450}, {218, 836}, {759, 960}, {930, 146}, {977, 954}, {255, 618}, {649, 60}, {686, 380}, {473, 75}, {566, 614}, {281, 109}, {670, 537}, {771, 973}, {526, 428}, {572, 817}, {517, 702}, {187, 943}, {970, 658}, {601, 517}, {869, 744}, {713, 882}, {729, 745}, {907, 126}, {616, 111}, {900, 687}, {411, 610}, {727, 460}, {671, 754}, {866, 783}, {145, 369}, {484, 655}, {159, 912}, {490, 762}, {597, 519}, {55, 803}, {490, 810}, {501, 289}, {94, 449}, {822, 787}, {654, 700}, {701, 456}, {874, 208}, {796, 261}, {885, 738}, {613, 574}, {222, 78}, {368, 223}, {635, 93}, {226, 232}, {872, 991}, {113, 651}, {685, 304}, {830, 235}, {569, 165}, {948, 339}, {239, 854}, {115, 135}, {27, 100}, {949, 659}, {275, 388}, {498, 822}, {139, 981}, {501, 522}, {530, 940}, {796, 322}, {723, 483}, {332, 730}, {918, 686}, {814, 984}, {25, 98}, {224, 506}, {395, 241}, {354, 705}, {82, 628}, {156, 190}, {502, 24}, {623, 298}, {224, 793}, {120, 681}, {669, 540}, {705, 410}, {129, 741}, {471, 953}, {90, 122}, {620, 301}, {297, 647}, {581, 407}, {558, 856}, {1000, 585}, {875, 242}, {218, 97}, {679, 825}, {222, 708}, {590, 763}, {262, 430}, {200, 262}, {353, 962}, {655, 731}, {202, 695}, {624, 859}, {817, 330}, {175, 872}, {653, 977}, {210, 608}, {116, 927}, {738, 604}, {153, 918}, {981, 601}, {851, 31}, {346, 143}, {667, 163}, {516, 150}, {203, 654}, {531, 91}, {921, 217}, {161, 470}, {137, 774}, {123, 245}, {819, 327}, {330, 477}, {78, 712}, {544, 961}, {895, 1000}, {207, 67}, {235, 293}, {859, 945}, {416, 414}, {927, 184}, {715, 562}, {694, 765}, {662, 566}, {493, 606}, {934, 901}, {326, 904}, {383, 11}, {284, 910}, {860, 842}, {570, 302}, {68, 401}, {794, 670}, {284, 623}, {927, 866}, {138, 965}, {757, 295}, {215, 35}, {139, 491}, {515, 458}, {228, 644}, {931, 883}, {450, 733}, {951, 168}, {588, 216}, {239, 376}, {819, 751}, {151, 690}, {328, 405}, {992, 206}, {582, 914}, {282, 595}, {481, 534}, {9, 815}, {597, 128}, {797, 583}, {942, 433}, {763, 195}, {865, 268}, {602, 342}, {552, 782}, {109, 889}, {782, 586}, {760, 621}, {971, 988}, {506, 49}, {61, 929}, {224, 133}, {508, 142}, {699, 33}, {126, 868}, {338, 313}, {353, 315}, {139, 243}, {408, 931}, {1000, 38}, {385, 283}, {923, 799}, {391, 518}, {796, 349}, {129, 130}, {460, 865}, {352, 826}, {356, 831}, {490, 331}, {367, 192}, {96, 629}, {115, 821}, {90, 82}, {234, 103}, {676, 903}, {55, 164}, {151, 285}, {965, 185}, {197, 549}, {477, 926}, {197, 390}, {520, 938}, {672, 547}, {720, 383}, {567, 413}, {949, 734}, {712, 207}, {881, 896}, {373, 487}, {258, 756}, {26, 707}, {316, 726}, {734, 875}, {999, 967}, {171, 446}, {581, 760}, {480, 947}, {269, 291}, {285, 795}, {483, 816}, {422, 464}, {742, 336}, {757, 435}, {182, 813}, {337, 974}, {717, 187}, {42, 54}, {589, 465}, {899, 955}, {921, 271}, {317, 808}, {299, 662}, {948, 749}, {5, 850}, {134, 948}, {431, 916}, {483, 717}, {347, 932}, {148, 750}, {299, 432}, {234, 801}, {825, 316}, {922, 359}, {118, 95}, {880, 946}, {408, 457}, {774, 709}, {133, 39}, {473, 515}, {182, 194}, {58, 279}, {926, 118}, {448, 935}, {346, 354}, {643, 325}, {297, 680}, {520, 418}, {108, 8}, {337, 17}, {680, 649}, {676, 107}, {6, 264}, {325, 769}, {276, 461}, {885, 459}, {981, 879}, {671, 664}, {73, 311}, {7, 996}, {234, 941}, {279, 922}, {454, 543}, {640, 893}, {998, 338}, {524, 563}, {555, 507}, {348, 474}, {786, 528}, {638, 469}, {672, 698}, {421, 345}, {986, 634}, {117, 73}, {17, 21}, {291, 532}, {321, 47}, {167, 510}, {889, 406}, {642, 145}, {811, 272}, {882, 181}, {123, 154}, {608, 167}, {627, 164}, {973, 356}, {341, 59}, {183, 823}, {69, 972}, {536, 280}, {877, 802}, {872, 505}, {294, 92}, {842, 10}, {25, 913}, {132, 385}, {593, 169}, {933, 254}, {634, 640}, {972, 123}, {874, 16}, {518, 496}, {254, 177}, {246, 683}, {572, 713}, {795, 362}, {460, 639}, {202, 273}, {531, 379}, {607, 983}, {401, 157}, {718, 219}, {286, 198}, {492, 758}, {343, 780}, {775, 785}, {270, 427}, {416, 862}, {651, 451}, {437, 525}, {448, 788}, {952, 137}, {17, 691}, {184, 42}, {458, 108}, {731, 612}, {998, 951}, {640, 599}, {894, 429}, {367, 155}, {254, 294}, {726, 447}, {625, 484}, {242, 807}, {319, 403}, {379, 632}, {999, 837}, {409, 887}, {971, 588}, {952, 442}, {540, 930}, {413, 116}, {857, 214}, {638, 538}, {636, 424}, {892, 624}, {420, 676}, {187, 986}, {827, 933}, {370, 220}, {737, 463}, {566, 848}, {9, 739}, {770, 200}, {911, 134}, {622, 952}, {30, 501}, {375, 159}, {441, 238}, {501, 367}, {709, 256}, {720, 480}, {776, 153}, {239, 672}, {986, 500}, {496, 250}, {433, 897}, {531, 351}, {603, 884}, {726, 52}, {73, 127}, {442, 382}, {767, 627}, {949, 757}, {921, 809}, {305, 827}, {558, 355}, {96, 561}, {813, 523}, {235, 215}, {529, 890}, {990, 9}, {209, 631}, {304, 888}, {615, 346}, {312, 666}, {340, 979}, {672, 76}, {145, 626}, {133, 720}, {743, 558}, {19, 224}, {123, 389}, {457, 87}, {461, 531}, {404, 437}, {838, 416}, {512, 722}, {788, 652}, {519, 395}, {101, 886}, {116, 917}, {616, 348}, {800, 350}, {366, 209}, {915, 843}, {365, 555}, {211, 227}, {259, 638}, {463, 546}, {166, 536}, {256, 277}, {72, 252}, {347, 923}, {884, 45}, {149, 286}, {268, 942}, {98, 869}, {183, 246}, {831, 426}, {249, 579}, {536, 975}, {580, 226}, {841, 22}, {931, 727}, {31, 570}, {456, 786}, {817, 978}, {749, 956}, {940, 725}, {413, 524}, {464, 495}, {123, 467}, {904, 364}, {973, 420}, {563, 736}, {227, 636}, {477, 592}, {43, 870}, {921, 694}, {485, 50}, {695, 12}, {506, 444}, {178, 193}, {591, 746}, {72, 83}, {218, 580}, {201, 398}, {949, 396}, {452, 189}, {629, 334}, {455, 737}, {350, 721}, {629, 419}, {568, 438}, {964, 877}, {147, 569}, {937, 378}, {703, 814}, {775, 13}, {229, 576}, {719, 473}, {428, 321}, {596, 861}, {611, 971}, {426, 160}, {131, 611}, {739, 202}, {809, 703}, {569, 874}, {413, 735}, {83, 23}, {385, 567}, {680, 332}, {256, 789}, {249, 176}, {189, 341}, {616, 689}, {933, 319}, {893, 915}, {84, 602}, {311, 482}, {759, 99}, {772, 249}, {621, 556}, {718, 526}, {156, 987}, {496, 125}, {873, 290}, {672, 247}, {336, 772}, {913, 969}, {695, 26}, {402, 573}, {377, 800}, {345, 110}, {194, 966}, {885, 650}, {111, 591}, {105, 61}, {129, 878}, {467, 212}, {555, 619}, {605, 309}, {507, 439}, {809, 839}, {209, 508}, {430, 452}, {339, 404}, {455, 443}, {62, 445}, {612, 550}, {754, 853}, {799, 255}, {390, 635}, {438, 493}, {500, 41}, {76, 511}, {450, 847}, {564, 906}, {136, 740}, {744, 173}, {614, 80}, {872, 832}, {252, 140}, {977, 693}, {653, 841}, {484, 656}, {613, 225}, {249, 131}, {424, 581}, {102, 553}, {260, 790}, {720, 596}, {600, 492}, {526, 292}, {35, 657}, {278, 72}, {43, 361}, {758, 178}, {637, 568}, {445, 259}, {341, 759}, {352, 94}, {644, 37}, {204, 222}, {485, 63}, {145, 393}, {774, 156}, {555, 333}, {799, 633}, {212, 58}, {901, 498}, {844, 840}, {711, 329}, {595, 276}, {196, 400}, {302, 732}, {325, 270}, {369, 161}, {300, 30}, {325, 777}, {209, 642}, {463, 489}, {733, 377}, {781, 834}, {857, 792}, {934, 982}, {556, 267}, {509, 257}, {145, 275}, {895, 864}, {86, 57}, {253, 819}, {964, 180}, {223, 386}, {379, 70}, {433, 2}, {6, 472}, {372, 306}, {7, 820}, {315, 197}, {645, 773}, {250, 422}, {881, 43}, {992, 617}, {242, 183}, {185, 607}, {22, 368}, {669, 968}, {512, 894}, {806, 297}, {993, 530}, {214, 307}, {732, 641}, {483, 85}, {509, 299}, {507, 265}, {914, 761}, {936, 876}, {658, 203}, {649, 218}, {160, 343}, {818, 239}, {674, 411}, {893, 6}, {371, 269}, {540, 529}, {70, 18}, {261, 71}, {279, 179}, {683, 678}, {789, 412}, {669, 399}, {667, 578}, {55, 863}, {922, 172}, {352, 542}, {964, 499}, {670, 328}, {21, 139}, {158, 213}, {87, 685}, {715, 488}, {945, 7}, {754, 237}, {726, 344}, {350, 995}, {630, 475}, {410, 478}, {4, 852}, {865, 287}, {454, 674}, {554, 775}, {864, 490}, {964, 504}, {37, 711}, {743, 742}, {373, 572}, {992, 65}, {544, 497}, {544, 51}, {590, 105}, {552, 900}, {721, 370}, {918, 158}, {921, 860}, {724, 548}, {116, 976}, {345, 454}, {700, 833}, {781, 485}, {300, 310}, {252, 106}, {575, 381}, {943, 514}, {586, 587}, {335, 892}, {365, 992}, {999, 221}, {434, 552}, {76, 871}, {307, 53}, {326, 462}, {452, 357}, {526, 767}, {18, 55}, {85, 288}, {906, 728}, {656, 28}, {704, 937}, {612, 957}, {819, 44}, {297, 503}, {533, 934}, {525, 949}, {696, 704}, {833, 114}, {750, 440}, {520, 885}, {256, 81}, {911, 320}, {102, 441}, {270, 980}, {215, 643}, {669, 653}, {748, 605}, {879, 620}, {293, 812}, {801, 90}, {767, 15}, {101, 512}, {190, 371}, {67, 27}, {552, 174}, {347, 835}, {240, 132}, {537, 589}, {129, 699}, {635, 284}, {944, 684}, {171, 715}, {405, 502}, {214, 919}, {726, 999}, {113, 818}, {737, 149}, {868, 771}, {130, 846}, {372, 881}, {169, 471}, {907, 415}, {439, 804}, {967, 152}, {16, 121}, {480, 719}, {781, 920}, {324, 911}, {354, 682}, {862, 421}, {571, 258}, {246, 849}, {909, 34}, {287, 468}, {345, 671}, {100, 352}, {109, 905}, {570, 104}, {113, 296}, {360, 692}, {775, 318}, {931, 533}, {721, 858}, {867, 196}, {207, 119}, {858, 300}, {648, 895}, {116, 697}, {700, 939}, {687, 867}, {288, 899}, {955, 950}, {981, 924}, {380, 248}, {30, 603}, {912, 748}, {310, 811}, {756, 675}, {624, 453}, {604, 281}, {775, 151}, {39, 845}, {861, 96}, {774, 985}, {612, 4}, {86, 373}, {398, 527}, {121, 282}, {926, 365}, {584, 77}, {373, 20}, {570, 509}, {404, 314}, {6, 384}, {784, 372}, {644, 710}, {881, 66}, {380, 857}, {739, 494}, {328, 755}, {425, 274}, {850, 615}, {638, 554}, {401, 56}, {198, 199}, {612, 598}, {340, 646}, {574, 582}, {712, 117}, {255, 397}, {253, 244}, {715, 768}, {348, 233}, {389, 1}, {984, 113}, {321, 374}, {902, 392}, {204, 481}, {375, 423}, {694, 89}, {223, 539}, {501, 74}, {37, 86}, {334, 366}, {626, 557}, {746, 360}, {657, 204}, {281, 3}, {22, 112}, {598, 668}, {475, 743}, {988, 663}, {736, 324}, {814, 535}, {125, 696}, {729, 571}, {85, 79}, {602, 766}, {683, 188}, {405, 312}, {969, 335}, {634, 144}, {509, 551}, {797, 236}, {914, 600}, {880, 148}, {996, 829}, {208, 593}, {999, 263}, {69, 266}, {890, 830}, {428, 436}, {791, 844}, {131, 560}, {726, 425}, {47, 64}, {260, 234}, {220, 688}, {882, 891}, {666, 201}, {542, 417}, {440, 838}, {299, 513}, {162, 409}, {680, 855}, {997, 921}, {820, 166}, {56, 124}, {64, 136}, {552, 994}, {828, 347}, {439, 993}, {186, 305}, {199, 466}, {881, 337}, {333, 997}, {711, 824}, {698, 724}, {225, 253}, {446, 718}, {885, 936}, {722, 902}, {840, 806}, {683, 175}, {183, 141}, {136, 101}, {894, 69}, {294, 170}, {884, 68}, {840, 431}, {54, 84}, {102, 229}, {612, 171}, {632, 303}, {225, 387}, {922, 898}, {787, 317}, {996, 240}, {391, 909}, {998, 260}, {557, 964}, {517, 851}, {674, 353}, {960, 630}, {342, 182}, {968, 805}, {820, 565}, {294, 723}, {768, 358}, {847, 609}, {566, 597}, {321, 402}, {847, 781}, {542, 594}, {645, 648}, {675, 797}, {699, 162}, {655, 798}, {89, 251}, {5, 340}, {12, 520}, {843, 408}, {73, 706}, {161, 231}, {758, 147}, {109, 102}, {14, 476}, {548, 928}, {27, 211}, {90, 669}, {680, 989}, {148, 544}, {882, 559}, {135, 434}, {31, 541}, {128, 729}, {824, 326}, {169, 779}, {173, 278}, {362, 616}, {549, 228}, {341, 191}, {29, 625}, {607, 998}, {882, 516}, {135, 660}, {702, 959}, {991, 613}, {594, 828}, {397, 622}, {890, 479}, {293, 205}, {646, 120}, {998, 667}, {707, 210}, {493, 665}, {120, 794}, {947, 908}, {176, 19}, {941, 323}, {435, 970}, {943, 944}, {728, 873}, {616, 776}, {936, 925}, {213, 637}, {433, 115}, {307, 880}, {392, 186}, {364, 88}, {238, 679}, {84, 747}, {373, 677}, {586, 796}, {484, 129}, {534, 521}, {535, 486}, {478, 545}, {226, 308}, {428, 753}, {802, 701}, {528, 455}, {125, 958}, {415, 764}, {433, 363}, {52, 564}, {534, 673}, {752, 645}, {238, 590}, {928, 752}, {511, 770}, {532, 29}}
	//edges = [][]int{{75, 25}, {58, 64}, {20, 56}, {29, 11}, {99, 78}, {60, 28}, {73, 55}, {44, 92}, {51, 75}, {16, 80}, {74, 97}, {64, 8}, {4, 53}, {79, 59}, {33, 49}, {39, 5}, {28, 87}, {27, 71}, {94, 62}, {46, 98}, {91, 20}, {49, 91}, {92, 60}, {10, 3}, {48, 51}, {22, 37}, {3, 100}, {21, 17}, {30, 79}, {31, 68}, {19, 24}, {2, 61}, {32, 77}, {100, 30}, {72, 15}, {84, 41}, {14, 47}, {6, 94}, {68, 42}, {47, 31}, {86, 43}, {18, 73}, {37, 63}, {1, 34}, {95, 6}, {12, 27}, {40, 13}, {52, 86}, {69, 38}, {82, 2}, {81, 54}, {13, 19}, {23, 97}, {96, 84}, {9, 50}, {87, 14}, {59, 33}, {42, 35}, {90, 4}, {50, 90}, {65, 18}, {83, 70}, {78, 45}, {35, 57}, {38, 83}, {5, 16}, {36, 26}, {97, 12}, {89, 40}, {77, 76}, {88, 69}, {17, 32}, {25, 96}, {15, 67}, {53, 10}, {11, 39}, {62, 46}, {70, 1}, {26, 22}, {71, 89}, {7, 95}, {67, 74}, {57, 7}, {41, 99}, {45, 44}, {61, 36}, {98, 85}, {54, 66}, {76, 48}, {8, 82}, {56, 52}, {63, 65}, {55, 29}, {66, 93}, {43, 72}, {85, 88}, {93, 21}, {34, 58}, {24, 81}, {80, 9}}

	//fmt.Println(findRedundantDirectedConnection(edges))
	//t := time.Now()
	//fmt.Println(findRedundantDirectedConnection1(edges), time.Since(t))
	t1 := time.Now()
	fmt.Println(findRedundantDirectedConnection2(edges), time.Since(t1))
	//to := time.Now()
	//fmt.Println(findRedundantDirectedConnectionOfficial(edges), time.Since(to))
}

// 这个出错了，无法判断切分的图里有独立的环
func findRedundantDirectedConnection(edges [][]int) []int {
	m := map[int][]int{} //第一个是作为父节点的次数，第二个值是作为子节点的次数，可以考虑替换为数组
	//mRoot := map[int]bool{} //判断是否为根节点map，

	n := len(edges)

	for i := 0; i < n; i++ {

		if m[edges[i][0]] == nil {
			m[edges[i][0]] = make([]int, 2)
		}
		if m[edges[i][1]] == nil {
			m[edges[i][1]] = make([]int, 2)
		}
		m[edges[i][0]][0]++
		m[edges[i][1]][1]++

		//if m[edges[i][0]][1] == 0 {
		//	mRoot[edges[i][0]] = true
		//} else {
		//	delete(mRoot, edges[i][0])
		//}
	}

	var root int
	for k, v := range m {
		if v[1] == 0 {
			root = k
			break
		}
	}

	for i := n - 1; i >= 0; i-- {
		//如果删除当前边，看是否有孤立节点，或者两个根节点，有则不行
		m[edges[i][0]][0]--
		m[edges[i][1]][1]--
		//检查是否是孤立节点
		if (m[edges[i][0]][0] == 0 && m[edges[i][0]][1] == 0) || (m[edges[i][1]][0] == 0 && m[edges[i][1]][1] == 0) {
			goto conti
		}
		//检查是否有两个根节点，即是该节点作为子节点的次数为0
		if m[edges[i][1]][1] == 0 && root != edges[i][0] && root != 0 {
			goto conti
		}

		//都不是，则是可行解
		return edges[i]

	conti:
		m[edges[i][0]][0]++
		m[edges[i][1]][1]++
	}

	return nil
}

//这个可以用，但是时间超了
func findRedundantDirectedConnection1(edges [][]int) []int {
	n := len(edges)
	matrixOut := make([][]int, n+1) //代表出发的下标节点，matrixOut[3,2]=1代表由3出发可到2
	for i := 0; i < n; i++ {
		matrixOut[i+1] = make([]int, n+1)
	}

	for i := 0; i < n; i++ {
		matrixOut[edges[i][0]][edges[i][1]] = 1
	}

	var root int
	for i := 0; i < n; i++ {
		var num int
		for j := 0; j < n; j++ {
			num += matrixOut[j+1][i+1]
		}
		if num == 0 {
			root = i + 1
			break
		}
	}

	for i := n - 1; i >= 0; i-- {
		matrixOut[edges[i][0]][edges[i][1]] = 0

		//开始染色
		if color(root, n, edges[i][1], matrixOut) {
			return edges[i]
		}

		matrixOut[edges[i][0]][edges[i][1]] = 1
	}

	return nil
}

func color(root, n, end int, matrix [][]int) bool {
	queue := []int{}
	colored := make(map[int]bool)

	if root == 0 {
		//没有初始根，则从断开的结尾开始染色
		queue = append(queue, end)
		colored[end] = true
	} else {
		//有初始根，则从根开始染色
		queue = append(queue, root)
		colored[root] = true
	}

	for len(queue) > 0 {
		this := queue[0]
		queue = queue[1:]
		for i := 1; i <= n; i++ {
			if matrix[this][i] != 0 && !colored[i] {
				colored[i] = true
				if len(colored) == n {
					return true
				}
				queue = append(queue, i)
			}
		}
	}
	return len(colored) == n
}

//这个思想和上面一样，打算改成位运算
func findRedundantDirectedConnection2(edges [][]int) []int {
	n := len(edges)
	matrix := make([]int, n) //如matrix[1]=0110，从低位到高位，代表从1出发能到2和3，不能到1和4，到达下标+1

	for i := 0; i < n; i++ {
		matrix[edges[i][0]-1] |= 1 << (edges[i][1] - 1) //计算每个位可到达的位置
	}

	var root, index int
	for i := 0; i < n; i++ {
		index |= matrix[i] //将所有的值或
	}

	a := 1<<n - 1 - index //取出为1的位置
	if a == 0 {
		root = 0
	} else {
		root = int(math.Log2(float64(a))) + 1
	}

	for i := n - 1; i >= 0; i-- {
		matrix[edges[i][0]-1] ^= 1 << (edges[i][1] - 1)
		//开始染色
		//if color1(root, n, edges[i][1], matrix) {
		if color2(root, n, edges[i][1], matrix) {
			return edges[i]
		}
		matrix[edges[i][0]-1] |= 1 << (edges[i][1] - 1)
	}

	return nil
}

func color1(root, n, end int, matrix []int) bool {
	queue := []int{}
	colored := make(map[int]bool)

	if root == 0 {
		//没有初始根，则从断开的结尾开始染色
		queue = append(queue, end)
		colored[end] = true
	} else {
		//有初始根，则从根开始染色
		queue = append(queue, root)
		colored[root] = true
	}

	for len(queue) > 0 {
		this := queue[0]
		queue = queue[1:]
		tmp := matrix[this-1]
		if tmp == 0 { //没有子节点
			continue
		}
		for i := 0; i < n; i++ {
			if tmp&1 == 1 && !colored[i+1] {
				colored[i+1] = true
				if len(colored) == n {
					return true
				}
				queue = append(queue, i+1)
			}
			tmp >>= 1
			if tmp == 0 {
				break
			}
		}

	}
	return len(colored) == n
}

func color2(root, n, end int, matrix []int) bool {
	queue := []int{}
	colored := make(map[int]bool)

	if root == 0 {
		//没有初始根，则从断开的结尾开始染色
		queue = append(queue, end)
		colored[end] = true
	} else {
		//有初始根，则从根开始染色
		queue = append(queue, root)
		colored[root] = true
	}

	for len(queue) > 0 {
		this := queue[0]
		queue = queue[1:]
		tmp := matrix[this-1]
		if tmp == 0 { //没有子节点
			continue
		}
		for tmp > 0 {
			a := tmp & (-tmp)                          //找到了最低位的1，因为-tmp是以补码的形式储存
			position := int(math.Log2(float64(a))) + 1 //最小的一位的下标
			if !colored[position] {
				colored[position] = true
				if len(colored) == n {
					return true
				}
				queue = append(queue, position)
				tmp ^= a //去掉最后一位的1
			}
		}

	}
	return len(colored) == n
}

func findRedundantDirectedConnectionOfficial(edges [][]int) (redundantEdge []int) {
	numNodes := len(edges)
	uf := newUnionFind(numNodes + 1)
	parent := make([]int, numNodes+1) // parent[i] 表示 i 的父节点
	for i := range parent {
		parent[i] = i
	}

	var conflictEdge, cycleEdge []int
	for _, edge := range edges {
		from, to := edge[0], edge[1]
		if parent[to] != to { // to 有两个父节点
			conflictEdge = edge
		} else {
			parent[to] = from
			if uf.find(from) == uf.find(to) { // from 和 to 已连接
				cycleEdge = edge
			} else {
				uf.union(from, to)
			}
		}
	}

	// 若不存在一个节点有两个父节点的情况，则附加的边一定导致环路出现
	if conflictEdge == nil {
		return cycleEdge
	}
	// conflictEdge[1] 有两个父节点，其中之一与其构成附加的边
	// 由于我们是按照 edges 的顺序连接的，若在访问到 conflictEdge 之前已经形成了环路，则附加的边在环上
	// 否则附加的边就是 conflictEdge
	if cycleEdge != nil {
		return []int{parent[conflictEdge[1]], conflictEdge[1]}
	}
	return conflictEdge
}

type unionFind struct {
	ancestor []int
}

func newUnionFind(n int) unionFind {
	ancestor := make([]int, n)
	for i := 0; i < n; i++ {
		ancestor[i] = i
	}
	return unionFind{ancestor}
}

func (uf unionFind) find(x int) int {
	if uf.ancestor[x] != x {
		uf.ancestor[x] = uf.find(uf.ancestor[x])
	}
	return uf.ancestor[x]
}

func (uf unionFind) union(from, to int) {
	uf.ancestor[uf.find(from)] = uf.find(to)
}
